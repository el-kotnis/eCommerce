init:
backend
1. npm init 
enter details: description, entry point (server.js), author
2. create backend and frontend folders
3. npm i express dotenv mongoose
4. nodemon:
npm i nodemon --save-dev
make changes to "scripts" in package.json (start,dev,prod).
5. npm i bcryptjs jsonwebtoken validator nodemailer
for user authentication and authorization purposes

6. npm i cookie-parser body-parser
for storing tokens

frontend:
1. "npx create-react-app ."

2. npm i axios react-alert react-alert-template-basic react-bootstrap react-helmet react-redux redux redux-thunk redux-devtools-extension react-router-dom

//react-devtools-extension is no longer supported
3.npm install --save redux-devtools-extension

4. (25.) add: "proxy":"http://127.0.0.1:4000/"
in package.json in frontend folder.

5. npm install http-proxy-middleware --save
for enabling proxy

6. (31.) npm install react-js-pagination
for pagination

7. (33.) npm i rc-slider
for filtering products

8. npm i cloudinary (outside frontend and backend)
for images

9. npm i express-fileupload
________________________________________________
1. create server and app.js files and config folder in backend
create config.env in config,
node backend/server.js 
to start server

2. create controllers and routes folders, and in them productController.js
and product.js
import product.js in app.js, add some more changes.

3. in Postman, create an environment for the project eCommerce,
with variable name, initial value and current value
create a collection named eCommerce and within it a folder Products,
create a http GET request for Products to display all products in the database.

create database.js within config, add new variable in config DB_LOCAL_URI
write the connectDatabase function in database.js, and import it into server.js
run: npm run dev
was getting the error: UnhandledPromiseRejectionWarning: MongoParseError: option usecreateindex is not supported
so removed usecreateindex: true from the connectDatabase function in 
database.js, due to it no longer being supported in the new MongoDB version

4. in backend create models folder, and product.js in it.
in product.js create the schema for products.

5. in productController.js create the function for newProduct, import 
it into product.js in routes as a post

create data folder in backend, in it product.json with sample data
of products to test the api

test POST request on the new route created,
(did not work due to async error)

6. create utils folder and in it seeder.js,
for the seeder script, add "seeder" and its location
to package.json in "scripts"

tested POST request again, worked after commenting
out the user

7. add code to productController.js in getProducts 
to get all products

8. create the route and function for getting single product 
and test the api in Postman
same for updateProduct and deleteProduct

9. create errorHandler.js in utils folder, in middlewares folder
create errors.js and import into it errorHandler.js,
then import errors.js into app.js
create catchAsyncErrors.js in middlewares and wrap all async functions
with it in productController.js, also created seperate error
responses to dev and prod modes in errors.js

10. write the code for unhandled promise rejections 
and uncaught exceptions in server.js

11. add the code to handle wrong mongoose object id error 
in prod mode in errors.js and also the same for mongoose validation error

12. create apiFeatures.js in utils to enable search functionality
with the search function
import it into getProducts function of productController
do the same for filter and pagination functionality with filter function
and pagination function

13. installed the dependencies for user auth and token storage
created the user model in user.js in models folder
create authController.js in controllers folder, create the function
for registerUser
create auth.js in routes folder for auth routes, import it in app.js

write the code for jwt token in user model, create the 
new jwt env's in config.env

14. create function for loginUser

15. create jwtToken.js in utils, and COOKIE_EXPIRES_TIME in config.env
this is to create and send token and save it in the cookie
import it into authController.js.

16. create auth.js in middlewares, this is to protect routes from 
unauthenticated users.
import cookieParser into app.js 
import isAuthenticatedUser function from middlewares/auth into 
routes/product.js and apply it to the getProducts route.
***there is an error with isAuthenticatedUser with jwt token 

17. remove isAuthenticatedUser from the getProducts route and add 
it to newProduct, updateProduct and deleteProduct
create the authorizeRoles() function in middlewares/auth
this is to authorize user roles when it comes to certain operations
add the user to the Product model to store the details of the user
that added that product,
add code to newProduct in productController
add code for handling mongoose duplicate key error in prod mode
in middlewares/errors.js, same for wrong and expired JWT errors

18.create getUserProfile in controllers/authController
to get info of the logged in user and add its route in 
routes/auth
create functions to get all users and single user, update and delete user
in authController for the admin and add the routes to routes/auth
as admin

***still have to add password forgot/update utilities

19. create the order model
create controllers/orderController,
in it newOrder function to create new orders,
create routes/order, add the route for newOrder in it.
add routes/order to app.js
do the same for getSingleOrder, myOrders, allOrders,updateOrder,
and deleteOrder

20. create functions for creating/updating review, get all reviews and delete review
in productController and add those routes to routes/product

frontend

21. import the bootstrap, fontawesome and required font links into
index.html, and the scripts for jquery and bootstrap into index.html
delete the redundant files and stuff from App.js index.js 
create components/layout in src, in it Header.js and Footer.js
import them in App.js

22. create components/Home.js and enter code for the Home page 

23. add react router to App.js, <Route> tags need to be enclosed by 
<Routes></Routes>
create components/layout/MetaData.js import Helmet into it.
this is to create titles for pages. import MetaData into whichever 
file that requires a title.

24. create store.js in src, write the sample code for it
import store.js and Provider into index.js
replace React.StrictMode with Provider
create reducers folder in src, in it productReducers.js, write sample code
create constants folder in src, in it productConstants.js
import the constants into productReducers and write code for
productsReducer function 
import productsReducer into store.js

25. create actions folder, in it productActions.js
add: "proxy":"http://127.0.0.1:4000/"
in package.json in frontend folder.
in actions/productActions create getProducts and clearErrors functions.

26. npm install http-proxy-middleware --save
for enabling proxy
create src/setupProxy.js
remove the "proxy" from package.json previously added.

27. import useDispatch and useSelector into Home.js
use dispatch to get all products from the backend
write code to loop through the products with map to 
display their details on the Home
create product folder in components, in it Product.js
write the html for the rendering the product info int it
call this component in Home.js in the map function for looping 
through the products.
write the code for simple loading in Home.js.

28. create Loader.js in layout for the Loader component
in index.js import positions,transitions,Provider as AlertProvider
add AlertProvider to the render function
this is to deal with errors in frontend

29. create the constants for productDetailsReducer
and write its function in productReducers.js
import it into store.js

create the getProductDetails function in productActions.js

30. create ProductDetails.js in product
import it into App.js
for the image slider, import Carousel

31. npm install react-js-pagination
for pagination

32. create Search.js in layout for search functionality
import it into header. import the search route into App.js

33. npm i rc-slider
for filtering products
edit the link in getProducts func in productActions.js
for the range.
changed logo and navbar color 
add filter code in Home.js
add link to main screen on logo

34. add code for category filter in Home.js
and the required variables and links in other files

35. added a navbar and created components for the navbar links
imported them into App.js

36. added hero banners to Home.js

37. made some changes in backend, connected to online db,etc 
for review 1 build

38. create userConstants.js in constants.
create reducers/userReducers.js
in it create authReducer function for login 
import it into store.js.
create actions/userAction.js and the login function in it.

39. create user/Login.js in components.
Add the Link to Login button in Header.js.
Import it into App.js.

40. add user registration constants to userConstants and userReducers function
authReducer. create the register function in userActions for user registration.

41. npm i cloudinary (outside frontend and backend)
in backend app.js, import body-parser and cloudinary
in config.env, create the cloudinary endpoints
in the cloudinary dashboard, create the avatars and products
folder in media library.
in authController import cloudinary, create the variable
result to add the avatar image to the avatars folder in registerUser function,
edit the dummy avatar id and url in the user variable in registerUser
with the id and url from the result variable.

42. move some of the config and cloudinary code from app.js to server.js
npm i express-fileupload
create the Register.js in components/user
add its route in App.js