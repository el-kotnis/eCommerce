init:
1. npm init 
enter details: description, entry point (server.js), author
2. create backend and frontend folders
3. npm i express dotenv mongoose
4. nodemon:
npm i nodemon --save-dev
make changes to "scripts" in package.json (start,dev,prod).
5. npm i bcryptjs jsonwebtoken validator nodemailer
for user authentication and authorization purposes

6. npm i cookie-parser body-parser
for storing tokens
________________________________________________
1. create server and app.js files and config folder in backend
create config.env in config,
node backend/server.js 
to start server

2. create controllers and routes folders, and in them productController.js
and product.js
import product.js in app.js, add some more changes.

3. in Postman, create an environment for the project eCommerce,
with variable name, initial value and current value
create a collection named eCommerce and within it a folder Products,
create a http GET request for Products to display all products in the database.

create database.js within config, add new variable in config DB_LOCAL_URI
write the connectDatabase function in database.js, and import it into server.js
run: npm run dev
was getting the error: UnhandledPromiseRejectionWarning: MongoParseError: option usecreateindex is not supported
so removed usecreateindex: true from the connectDatabase function in 
database.js, due to it no longer being supported in the new MongoDB version

4. in backend create models folder, and product.js in it.
in product.js create the schema for products.

5. in productController.js create the function for newProduct, import 
it into product.js in routes as a post

create data folder in backend, in it product.json with sample data
of products to test the api

test POST request on the new route created,
(did not work due to async error)

6. create utils folder and in it seeder.js,
for the seeder script, add "seeder" and its location
to package.json in "scripts"

tested POST request again, worked after commenting
out the user

7. add code to productController.js in getProducts 
to get all products

8. create the route and function for getting single product 
and test the api in Postman
same for updateProduct and deleteProduct

9. create errorHandler.js in utils folder, in middlewares folder
create errors.js and import into it errorHandler.js,
then import errors.js into app.js
create catchAsyncErrors.js in middlewares and wrap all async functions
with it in productController.js, also created seperate error
responses to dev and prod modes in errors.js

10. write the code for unhandled promise rejections 
and uncaught exceptions in server.js

11. add the code to handle wrong mongoose object id error 
in prod mode in errors.js and also the same for mongoose validation error

12. create apiFeatures.js in utils to enable search functionality
with the search function
import it into getProducts function of productController
do the same for filter and pagination functionality with filter function
and pagination function

13. installed the dependencies for user auth and token storage
created the user model in user.js in models folder
create authController.js in controllers folder, create the function
for registerUser
create auth.js in routes folder for auth routes, import it in app.js

write the code for jwt token in user model, create the 
new jwt env's in config.env

14. create function for loginUser

15. create jwtToken.js in utils, and COOKIE_EXPIRES_TIME in config.env
this is to create and send token and save it in the cookie
import it into authController.js.


